package compilador;

public interface ParserConstants
{
    int START_SYMBOL = 48;

    int FIRST_NON_TERMINAL    = 48;
    int FIRST_SEMANTIC_ACTION = 85;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  1, -1, -1, -1, -1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  3, -1, -1, -1, -1, -1,  3, -1,  3, -1, -1, -1, -1, -1,  3, -1, -1,  3,  3,  3, -1, -1,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  6, -1, -1, -1, -1, -1,  6, -1,  6, -1, -1, -1, -1, -1,  6, -1, -1,  6,  6,  6, -1, -1,  4,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 16, -1, 17, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 22, -1, 20, -1, -1, -1, -1, 19, -1, -1, 18, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 23, 24, 25, 26, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  9, -1, -1, -1, -1, -1, 14, -1, 13, -1, -1, -1, -1, -1, 12, -1, -1, 11, 11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 41, 41, 41, 41, 41, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, 41, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 47, -1, -1, -1, -1, -1, 47, -1, 47, -1, -1, -1, -1, -1, 47, -1, -1, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 48, -1, -1, -1, -1, -1, 48, -1, 48, 49, 49, -1, -1, -1, 48, -1, -1, 48, 48, 48, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 38, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, 51, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 54, -1, -1, -1 },
        { -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, 55, 55, -1, -1, -1, -1, 58, -1, -1 },
        { -1, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, 60, -1, -1, 61, 61, 61, 61, -1, -1, -1, -1, 60, 60, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 66, 66, 66, 66, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, -1, -1, 67, -1, -1, 67, 67, 67, 67, 68, 69, -1, -1, 67, 67, -1, -1, -1 },
        { -1, 70, 70, 70, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, -1, -1, 71, -1, -1, 71, 71, 71, 71, 71, 71, 72, 74, 71, 71, -1, 73, -1 },
        { -1, 75, 76, 77, 78, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, 81, 82, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 100,  15,  18,  33,  49,  34, 101 },
        {  51,  50 },
        {   0 },
        {  49 },
        {  52 },
        {  53 },
        {  58 },
        {  24,  72 },
        {  25,  72 },
        {  59 },
        {  60 },
        {  61 },
        {  64 },
        {  68 },
        {   8,  29 },
        {   2, 117,  55 },
        {  28,  54 },
        {   0 },
        {  17 },
        {  14 },
        {   9 },
        {  22 },
        {   7 },
        {   3 },
        {   4 },
        {   5 },
        {   6 },
        {  23 },
        {  13 },
        {  54,  69,  29 },
        {  70,  71 },
        {  27,  56, 115, 116 },
        {  30,  57 },
        {   0 },
        {  30,  57 },
        {   2, 117,  30,  74, 119,  29 },
        {  21,  31,  73,  54, 120,  32,  29 },
        {   6, 107,  99,  28 },
        {   0 },
        {  19,  31,  62,  32,  29 },
        {  20,  31,  62,  32, 102,  29 },
        {  74,  99,  63 },
        {   0 },
        {  28,  62 },
        {  16,  31,  74,  32, 109,  66,  65,  12, 111,  29 },
        {  11, 110,  66 },
        {   0 },
        {  58,  67 },
        {  66 },
        {   0 },
        { 112,  10,  66,  26,  31,  74,  32, 113,  12,  29 },
        {  76,  75 },
        {   0 },
        {  43,  76, 103,  75 },
        {  44,  76, 104,  75 },
        {  77 },
        {  23,  96 },
        {  13,  97 },
        {  45,  76,  98 },
        {  80,  78 },
        {   0 },
        {  79,  94,  80,  95 },
        {  35 },
        {  36 },
        {  37 },
        {  38 },
        {  82,  81 },
        {   0 },
        {  39,  82,  86,  81 },
        {  40,  82,  87,  81 },
        {  84,  83 },
        {   0 },
        {  41,  84,  88,  83 },
        {  46,  84,  89,  83 },
        {  42,  84, 105,  83 },
        {   2, 118 },
        {   3,  90 },
        {   4,  91 },
        {   5, 106 },
        {   6, 107 },
        {  31,  74,  32 },
        {  39,  84,  92 },
        {  40,  84,  93 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa",
        "esperado identificador",
        "esperado constanteInt",
        "esperado constanteFloat",
        "esperado constanteChar",
        "esperado constanteString",
        "esperado boolean",
        "esperado break",
        "esperado char",
        "esperado do",
        "esperado else",
        "esperado end",
        "esperado false",
        "esperado float",
        "esperado fun",
        "esperado if",
        "esperado int",
        "esperado main",
        "esperado print",
        "esperado println",
        "esperado readln",
        "esperado string",
        "esperado true",
        "esperado val",
        "esperado var",
        "esperado while",
        "esperado :",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado (",
        "esperado )",
        "esperado {",
        "esperado }",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado %",
        "esperado &&",
        "esperado ||",
        "esperado !",
        "esperado /",
        "esperado \"\\\"",
        "esperado fun",//"<programa> inválido"
        "esperado identificador, break, do, if, print, println, readln, val, var",//"<lista_instrucoes> inválido"
        "esperado identificador, break, do, if, print, println, readln, val, var, }",//"<lista_instrucoes1> inválido",
        "esperado identificador, break, do, if, print, println, readln, val, var",//"<instrucoes> inválido",
        "esperado val",//"<constante> inválido",
        "esperado var",//"<variavel> inválido",
        "esperado identificador",//"<lista_identificadores> inválido",
        "esperado :, ',' =, )",//"<lista_identificadores1> inválido",
        "esperado int, float, char, boolean, string",//"<tipo> inválido",
        "esperado constanteInt, constanteFloat, constanteChar, constanteString, false, true",//"<valor> inválido",
        "esperado identificador, break, do, if, print, println, readln",//"<comando> inválido",
        "esperado identificador",//"<atribuicao> inválido",
        "esperado readln",//"<entrada_dados> inválido",
        "esperado print, println",//"<saida_dados> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, false, true, (, +, -, !",//"<lista_expressoes> inválido",
        "esperado ',' )", //"<lista_expressoes1> inválido",
        "esperado if",//"<selecao> inválido",
        "esperado else, end",//"<cmd_else> inválido",
        "esperado identificador, break, do, if, print, println, readln",//"<lista_comandos> inválido",
        "esperado identificador, break, do, else, end, if, print, println, readln, while",//"<lista_comandos1> inválido",
        "esperado do",//"<repeticao> inválido",
        "esperado :, =",//"<v> inválido",
        "esperado :, =",//"<v1> inválido",
        "esperado ;, =",//"<v2> inválido",
        "esperado identificador",//"<vFinal> inválido",
        "esperado identificador, constanteString",//"<constante_string> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, false, true, (, +, -, !",//<expressao> inválido",
        "esperado ',' ;, ), $$, ||",//"<expressao1> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, false, true, (, +, -, !",//"<elemento> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, (, +, -",//"<relacional> inválido",
        "esperado :, ',' (, ==, !=, <, >, &&, ||",//"<relacional1> inválido",
        "esperado ==, !=, <, >",//"<operador_relacional> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, (, +, -",//"<aritmetica> inválido",
        "esperado :, ',' ), ==, !=, <, >, +, -, &&, ||",//"<aritmetica1> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, (, +, -",//"<termo> inválido",
        "esperado :, ',' ), ==, !=, <, >, +, -, *, %, &&, ||, /",//"<termo1> inválido",
        "esperado identificador, constanteInt, constanteFloat, constanteChar, constanteString, (, +, -"//"<fator> inválido"
    };
}
